{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState, useMemo } from \"react\";\nimport { createTheme } from \"@mui/material\";\n\n//numbers on the bottom means the choosen color from lignt to dense.\n//also in here the primary color is grey as well, just gray in different way.\n//controlls the day/night mode of the app color\n\nexport const tokens = mode => ({\n  ...(mode === \"dark\" ? {\n    grey: {\n      100: \"#e0e0e0\",\n      200: \"#c2c2c2\",\n      300: \"#a3a3a3\",\n      400: \"#858585\",\n      500: \"#666666\",\n      600: \"#525252\",\n      700: \"#3d3d3d\",\n      800: \"#292929\",\n      900: \"#141414\"\n    },\n    primary: {\n      100: \"#d0d1d5\",\n      200: \"#a1a4ab\",\n      300: \"#727681\",\n      400: \"#1F2A40\",\n      500: \"#141b2d\",\n      600: \"#101624\",\n      700: \"#0c101b\",\n      800: \"#080b12\",\n      900: \"#040509\"\n    },\n    greenAccent: {\n      100: \"#dbf5ee\",\n      200: \"#b7ebde\",\n      300: \"#94e2cd\",\n      400: \"#70d8bd\",\n      500: \"#4cceac\",\n      600: \"#3da58a\",\n      700: \"#2e7c67\",\n      800: \"#1e5245\",\n      900: \"#0f2922\"\n    },\n    redAccent: {\n      100: \"#f8dcdb\",\n      200: \"#f1b9b7\",\n      300: \"#e99592\",\n      400: \"#e2726e\",\n      500: \"#db4f4a\",\n      600: \"#af3f3b\",\n      700: \"#832f2c\",\n      800: \"#58201e\",\n      900: \"#2c100f\"\n    },\n    blueAccent: {\n      100: \"#e1e2fe\",\n      200: \"#c3c6fd\",\n      300: \"#a4a9fc\",\n      400: \"#868dfb\",\n      500: \"#6870fa\",\n      600: \"#535ac8\",\n      700: \"#3e4396\",\n      800: \"#2a2d64\",\n      900: \"#151632\"\n    }\n  } : {\n    grey: {\n      100: \"#141414\",\n      200: \"#292929\",\n      300: \"#3d3d3d\",\n      400: \"#525252\",\n      500: \"#666666\",\n      600: \"#858585\",\n      700: \"#a3a3a3\",\n      800: \"#c2c2c2\",\n      900: \"#e0e0e0\"\n    },\n    primary: {\n      100: \"#040509\",\n      200: \"#080b12\",\n      300: \"#0c101b\",\n      400: \"#f2f0f0\",\n      500: \"#141b2d\",\n      600: \"#1F2A40\",\n      700: \"#727681\",\n      800: \"#a1a4ab\",\n      900: \"#d0d1d5\"\n    },\n    greenAccent: {\n      100: \"#0f2922\",\n      200: \"#1e5245\",\n      300: \"#2e7c67\",\n      400: \"#3da58a\",\n      500: \"#4cceac\",\n      600: \"#70d8bd\",\n      700: \"#94e2cd\",\n      800: \"#b7ebde\",\n      900: \"#dbf5ee\"\n    },\n    redAccent: {\n      100: \"#2c100f\",\n      200: \"#58201e\",\n      300: \"#832f2c\",\n      400: \"#af3f3b\",\n      500: \"#db4f4a\",\n      600: \"#e2726e\",\n      700: \"#e99592\",\n      800: \"#f1b9b7\",\n      900: \"#f8dcdb\"\n    },\n    blueAccent: {\n      100: \"#151632\",\n      200: \"#2a2d64\",\n      300: \"#3e4396\",\n      400: \"#535ac8\",\n      500: \"#6870fa\",\n      600: \"#868dfb\",\n      700: \"#a4a9fc\",\n      800: \"#c3c6fd\",\n      900: \"#e1e2fe\"\n    }\n  })\n});\nexport const themeSettings = mode => {\n  const colors = tokens(mode);\n  return {\n    /*return the palette and font */\n    palette: {\n      mode: mode,\n      ...(mode === \"dark\" ? {\n        // palette values for dark mode\n        primary: {\n          main: colors.primary[500]\n        },\n        secondary: {\n          main: colors.greenAccent[500]\n        },\n        neutral: {\n          dark: colors.grey[700],\n          main: colors.grey[500],\n          light: colors.grey[100]\n        },\n        background: {\n          default: colors.primary[500]\n        }\n      } : {\n        // palette values for light mode\n        primary: {\n          main: colors.primary[100]\n        },\n        secondary: {\n          main: colors.greenAccent[500]\n        },\n        neutral: {\n          dark: colors.grey[700],\n          main: colors.grey[500],\n          light: colors.grey[100]\n        },\n        background: {\n          default: \"#fcfcfc\"\n        }\n      })\n    },\n    typography: {\n      fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n      fontSize: 12,\n      h1: {\n        fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n        fontSize: 40\n      },\n      h2: {\n        fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n        fontSize: 32\n      },\n      h3: {\n        fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n        fontSize: 24\n      },\n      h4: {\n        fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n        fontSize: 20\n      },\n      h5: {\n        fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n        fontSize: 16\n      },\n      h6: {\n        fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n        fontSize: 14\n      }\n    }\n  };\n};\n\n//in fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"), what is the .joint for?\n//在这里，.join(\",\") 的作用是将多个字体名称合并成一个用逗号分隔的字符串。在这个例子中，fontFamily 属性期望一个字体名称的数组，但它只能接受一个字体名称的字符串。\n//通过使用 .join(\",\")，您可以将数组中的多个字体名称合并成一个用逗号分隔的字符串，以满足 fontFamily 属性的要求。\n//use \"camelCase\" for naming variables\n//myVariableName\n//calculateTotalAmount\n//getUserInfo\n// what is he\"...\"\" means? ...(mode === \"dark\" 部分表示根据条件来展开对象的属性。具体来说，如果条件 mode === \"dark\" 成立（为 true），\n//那么后面的对象将会被展开到外层的对象中。\n\n// context for color mode\n//what is the context means in here?\n//在 React 中，\"context\" 是一个特殊的组件，可以将数据和函数传递给组件树的不同部分。这使得您可以轻松地在组件之间共享数据，\n//以及让组件在不同的上下文环境中获得正确的数据。总之，\"context\" 在编程中表示程序运行时的环境或情境，它在前端开发中常常用于共享数据和状态，以简化组件之间的数据传递。\n//从 ColorModeContext 中获取了 toggleColorMode 函数，并将其用于按钮的点击事件上。当点击按钮时，可以调用 toggleColorMode 函数来切换颜色模式。\nexport const ColorModeContext = /*#__PURE__*/createContext({\n  toggleColorMode: () => {}\n});\nexport const useMode = () => {\n  _s();\n  const [mode, setMode] = useState(\"light\");\n  const colorMode = useMemo(() => ({\n    toggleColorMode: () => setMode(prev => prev === \"light\" ? \"dark\" : \"light\")\n  }), []);\n  /*[] 作为依赖项数组：依赖项数组告诉 React 什么情况下需要重新计算 useMemo 的结果。\n  当依赖项数组中的任何一个变量发生变化时，useMemo 内部的函数会重新执行。\n  如果依赖项数组为空（[]），那么 useMemo 内部的函数只会在组件首次渲染时执行一次，之后不会再执行。 */\n  const theme = useMemo(() => createTheme(themeSettings(mode)), [mode]);\n  return [theme, colorMode];\n};\n//const 是声明常量变量的关键字\n//通过 export const，您可以将常量变量暴露给其他模块，以便其他模块可以导入和使用这些常量。\n/*// constants.js 模块\nexport const myExportedConstant = 42; // 导出常量\n\n// otherModule.js 模块\nimport { myExportedConstant } from './constants.js'; // 导入常量\nconsole.log(myExportedConstant); // 42\n */\n/*这是一个箭头函数，它接收一个参数 prev，表示之前的颜色模式。根据 prev 的值，如果之前是 \"light\"，则返回 \"dark\"，如果之前是 \"dark\"，\n则返回 \"light\"。这样就实现了在 \"light\" 和 \"dark\" 之间切换的逻辑。在这个上下文中，prev 是一个参数，用于在切换颜色模式时访问之前的\n模式值。这种写法利用了函数作用域和闭包，以确保在更新颜色模式时，能够正确地使用之前的模式值。\n */\n/*useMemo 和 useCallback 都有助于减少不必要的计算和函数创建，从而提高组件的性能。useMemo 主要用于缓存计算的结果，而 useCallback 主要用于缓存函数。在选择使用哪个钩子时，要根据具体的情况和需要来决定。 */\n\n/*使用 export default 导出时，other file 导入时不需要花括号，可以自定义导入名字。\n不使用 export default，需要使用花括号来指定导入的内容，并且导入的名字必须和导出的名字一致。\n选择使用哪种方式取决于你的需求和设计。使用 export default 可以让导入代码更简洁，而不使用它则允许你一次性导出多个命名的内容。 */\n_s(useMode, \"rH2IxS7ra29cpeULm3TREnfglHU=\");","map":{"version":3,"names":["createContext","useState","useMemo","createTheme","tokens","mode","grey","primary","greenAccent","redAccent","blueAccent","themeSettings","colors","palette","main","secondary","neutral","dark","light","background","default","typography","fontFamily","join","fontSize","h1","h2","h3","h4","h5","h6","ColorModeContext","toggleColorMode","useMode","_s","setMode","colorMode","prev","theme"],"sources":["/Volumes/React Project/All Project/All Portfolio Project/react-my-admin/src/theme.js"],"sourcesContent":["import { createContext, useState, useMemo } from \"react\";\nimport { createTheme } from \"@mui/material\";\n\n\n//numbers on the bottom means the choosen color from lignt to dense.\n//also in here the primary color is grey as well, just gray in different way.\n//controlls the day/night mode of the app color\n\nexport const tokens = (mode) => ({\n    ...(mode === \"dark\"\n    ?{\n        grey: {\n            100: \"#e0e0e0\",\n            200: \"#c2c2c2\",\n            300: \"#a3a3a3\",\n            400: \"#858585\",\n            500: \"#666666\",\n            600: \"#525252\",\n            700: \"#3d3d3d\",\n            800: \"#292929\",\n            900: \"#141414\",\n          },\n          primary: {\n            100: \"#d0d1d5\",\n            200: \"#a1a4ab\",\n            300: \"#727681\",\n            400: \"#1F2A40\",\n            500: \"#141b2d\",\n            600: \"#101624\",\n            700: \"#0c101b\",\n            800: \"#080b12\",\n            900: \"#040509\",\n          },\n          greenAccent: {\n            100: \"#dbf5ee\",\n            200: \"#b7ebde\",\n            300: \"#94e2cd\",\n            400: \"#70d8bd\",\n            500: \"#4cceac\",\n            600: \"#3da58a\",\n            700: \"#2e7c67\",\n            800: \"#1e5245\",\n            900: \"#0f2922\",\n          },\n          redAccent: {\n            100: \"#f8dcdb\",\n            200: \"#f1b9b7\",\n            300: \"#e99592\",\n            400: \"#e2726e\",\n            500: \"#db4f4a\",\n            600: \"#af3f3b\",\n            700: \"#832f2c\",\n            800: \"#58201e\",\n            900: \"#2c100f\",\n          },\n          blueAccent: {\n            100: \"#e1e2fe\",\n            200: \"#c3c6fd\",\n            300: \"#a4a9fc\",\n            400: \"#868dfb\",\n            500: \"#6870fa\",\n            600: \"#535ac8\",\n            700: \"#3e4396\",\n            800: \"#2a2d64\",\n            900: \"#151632\",\n          },\n    }\n    :{\n        grey: {\n            100: \"#141414\",\n            200: \"#292929\",\n            300: \"#3d3d3d\",\n            400: \"#525252\",\n            500: \"#666666\",\n            600: \"#858585\",\n            700: \"#a3a3a3\",\n            800: \"#c2c2c2\",\n            900: \"#e0e0e0\",\n          },\n          primary: {\n            100: \"#040509\",\n            200: \"#080b12\",\n            300: \"#0c101b\",\n            400: \"#f2f0f0\", \n            500: \"#141b2d\",\n            600: \"#1F2A40\",\n            700: \"#727681\",\n            800: \"#a1a4ab\",\n            900: \"#d0d1d5\",\n          },\n          greenAccent: {\n            100: \"#0f2922\",\n            200: \"#1e5245\",\n            300: \"#2e7c67\",\n            400: \"#3da58a\",\n            500: \"#4cceac\",\n            600: \"#70d8bd\",\n            700: \"#94e2cd\",\n            800: \"#b7ebde\",\n            900: \"#dbf5ee\",\n          },\n          redAccent: {\n            100: \"#2c100f\",\n            200: \"#58201e\",\n            300: \"#832f2c\",\n            400: \"#af3f3b\",\n            500: \"#db4f4a\",\n            600: \"#e2726e\",\n            700: \"#e99592\",\n            800: \"#f1b9b7\",\n            900: \"#f8dcdb\",\n          },\n          blueAccent: {\n            100: \"#151632\",\n            200: \"#2a2d64\",\n            300: \"#3e4396\",\n            400: \"#535ac8\",\n            500: \"#6870fa\",\n            600: \"#868dfb\",\n            700: \"#a4a9fc\",\n            800: \"#c3c6fd\",\n            900: \"#e1e2fe\",\n          },\n    }),\n});\n\nexport const themeSettings = (mode) =>{\n    const colors = tokens(mode);\n    return{ /*return the palette and font */\n        palette: {\n           mode: mode,\n           ...(mode === \"dark\"\n           ?{\n            // palette values for dark mode\n            primary:{\n                main: colors.primary[500],\n            },\n            secondary:{\n                main:colors.greenAccent[500],\n            },\n            neutral:{\n                dark: colors.grey[700],\n                main: colors.grey[500],\n                light: colors.grey[100],\n            },\n            background:{\n                default: colors.primary[500],\n            },\n           }\n           :{\n            // palette values for light mode\n            primary: {\n                main: colors.primary[100],\n              },\n              secondary: {\n                main: colors.greenAccent[500],\n              },\n              neutral: {\n                dark: colors.grey[700],\n                main: colors.grey[500],\n                light: colors.grey[100],\n              },\n              background: {\n                default: \"#fcfcfc\",\n              },\n           }),\n        },\n        typography: {\n            fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n            fontSize:12,\n            h1: {\n                fontFamily:  [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n                fontSize: 40,\n            },\n            h2: {\n                fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n                fontSize: 32,\n              },\n              h3: {\n                fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n                fontSize: 24,\n              },\n              h4: {\n                fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n                fontSize: 20,\n              },\n              h5: {\n                fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n                fontSize: 16,\n              },\n              h6: {\n                fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n                fontSize: 14,\n              },\n        },\n    };\n};\n\n//in fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"), what is the .joint for?\n//在这里，.join(\",\") 的作用是将多个字体名称合并成一个用逗号分隔的字符串。在这个例子中，fontFamily 属性期望一个字体名称的数组，但它只能接受一个字体名称的字符串。\n//通过使用 .join(\",\")，您可以将数组中的多个字体名称合并成一个用逗号分隔的字符串，以满足 fontFamily 属性的要求。\n//use \"camelCase\" for naming variables\n//myVariableName\n//calculateTotalAmount\n//getUserInfo\n// what is he\"...\"\" means? ...(mode === \"dark\" 部分表示根据条件来展开对象的属性。具体来说，如果条件 mode === \"dark\" 成立（为 true），\n//那么后面的对象将会被展开到外层的对象中。\n\n\n// context for color mode\n//what is the context means in here?\n//在 React 中，\"context\" 是一个特殊的组件，可以将数据和函数传递给组件树的不同部分。这使得您可以轻松地在组件之间共享数据，\n//以及让组件在不同的上下文环境中获得正确的数据。总之，\"context\" 在编程中表示程序运行时的环境或情境，它在前端开发中常常用于共享数据和状态，以简化组件之间的数据传递。\n//从 ColorModeContext 中获取了 toggleColorMode 函数，并将其用于按钮的点击事件上。当点击按钮时，可以调用 toggleColorMode 函数来切换颜色模式。\nexport const ColorModeContext = createContext({\n    toggleColorMode: ()=>{},\n});\n\nexport const useMode = () =>{\n    const [mode, setMode] = useState(\"light\");\n\n    const colorMode = useMemo (\n        () => ({\n            toggleColorMode: ()=>\n            setMode((prev) => (prev === \"light\" ? \"dark\" : \"light\")),\n        }),\n        []\n    );\n   /*[] 作为依赖项数组：依赖项数组告诉 React 什么情况下需要重新计算 useMemo 的结果。\n   当依赖项数组中的任何一个变量发生变化时，useMemo 内部的函数会重新执行。\n如果依赖项数组为空（[]），那么 useMemo 内部的函数只会在组件首次渲染时执行一次，之后不会再执行。 */\n const theme = useMemo (() => createTheme(themeSettings(mode)), [mode]);\n return [ theme, colorMode];\n};\n//const 是声明常量变量的关键字\n//通过 export const，您可以将常量变量暴露给其他模块，以便其他模块可以导入和使用这些常量。\n/*// constants.js 模块\nexport const myExportedConstant = 42; // 导出常量\n\n// otherModule.js 模块\nimport { myExportedConstant } from './constants.js'; // 导入常量\nconsole.log(myExportedConstant); // 42\n */\n/*这是一个箭头函数，它接收一个参数 prev，表示之前的颜色模式。根据 prev 的值，如果之前是 \"light\"，则返回 \"dark\"，如果之前是 \"dark\"，\n则返回 \"light\"。这样就实现了在 \"light\" 和 \"dark\" 之间切换的逻辑。在这个上下文中，prev 是一个参数，用于在切换颜色模式时访问之前的\n模式值。这种写法利用了函数作用域和闭包，以确保在更新颜色模式时，能够正确地使用之前的模式值。\n */\n/*useMemo 和 useCallback 都有助于减少不必要的计算和函数创建，从而提高组件的性能。useMemo 主要用于缓存计算的结果，而 useCallback 主要用于缓存函数。在选择使用哪个钩子时，要根据具体的情况和需要来决定。 */\n\n/*使用 export default 导出时，other file 导入时不需要花括号，可以自定义导入名字。\n不使用 export default，需要使用花括号来指定导入的内容，并且导入的名字必须和导出的名字一致。\n选择使用哪种方式取决于你的需求和设计。使用 export default 可以让导入代码更简洁，而不使用它则允许你一次性导出多个命名的内容。 */\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}